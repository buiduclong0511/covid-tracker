{"version":3,"sources":["Components/SelectField.jsx","Components/DateField.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["SelectField","options","selectedValue","label","onChange","Autocomplete","getOptionLabel","option","Country","fullWidth","value","renderInput","params","TextField","margin","variant","DateField","maxDate","StyledDateField","utils","DateFnsUtils","Grid","container","justifyContent","disableToolbar","format","id","KeyboardButtonProps","autoOk","Date","setDate","getDate","maxDateMessage","styled","div","App","useState","countries","setCountries","selectedCountry","setSelectedCountry","from","to","dateRange","setDateRange","total","setTotal","report","setReport","title","text","xAxis","categories","series","setOptions","isShowChart","setIsShowChart","fetchCountries","a","axios","get","res","data","console","log","response","fetchReport","dateFrom","toISOString","dateTo","Slug","length","chartTitle","_dateRange","map","toDateString","deaths","Deaths","recovereds","Recovered","confirmeds","Confirmed","yAxis","name","color","fetchReportNow","useEffect","Container","className","e","date","Button","onClick","highcharts","Highcharts","href","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c872089.chunk.js","sourcesContent":["import { TextField } from \"@material-ui/core\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n\r\nexport const SelectField = ({\r\n    options = [],\r\n    selectedValue = null,\r\n    label = \"\",\r\n    onChange = () => {}\r\n}) => {\r\n    return (\r\n        <Autocomplete\r\n            options={options}\r\n            getOptionLabel={(option) => option.Country}\r\n            fullWidth\r\n            onChange={onChange}\r\n            value={selectedValue}\r\n            renderInput={(params) => <TextField {...params} label={label} margin=\"normal\" variant=\"standard\" />}\r\n        />\r\n    );\r\n};","import styled from \"styled-components\";\r\nimport 'date-fns';\r\nimport React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\nexport const DateField = ({\r\n    label = \"\",\r\n    value = null,\r\n    maxDate = null,\r\n    onChange = () => {}\r\n}) => {\r\n    return (\r\n        <StyledDateField>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <Grid container justifyContent=\"space-around\">\r\n                <KeyboardDatePicker\r\n                    disableToolbar\r\n                    variant=\"inline\"\r\n                    format=\"MM/dd/yyyy\"\r\n                    margin=\"normal\"\r\n                    id=\"date-picker-inline\"\r\n                    label={label}\r\n                    value={value}\r\n                    onChange={onChange}\r\n                    KeyboardButtonProps={{\r\n                        'aria-label': 'change date',\r\n                    }}\r\n                    autoOk\r\n                    maxDate={maxDate ? maxDate : new Date(new Date().setDate(new Date().getDate() - 1))}\r\n                    maxDateMessage=\"Ngày không hợp lệ\"\r\n                    fullWidth\r\n                />\r\n                </Grid>\r\n            </MuiPickersUtilsProvider>\r\n        </StyledDateField>\r\n    );\r\n};\r\n\r\nconst StyledDateField = styled.div`\r\n\r\n`;","import { Button } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { DateField, SelectField } from \"./Components\";\r\n\r\nexport const App = () => {\r\n    const [countries, setCountries] = useState([]);\r\n    const [selectedCountry, setSelectedCountry] = useState(null);\r\n    const [dateRange, setDateRange] = useState({\r\n        from: null,\r\n        to: null\r\n    });\r\n    const [total, setTotal] = useState(null);\r\n    const [report, setReport] = useState([]);\r\n    const [options, setOptions] = useState({\r\n        title: {\r\n          text: ''\r\n        },\r\n        xAxis: {\r\n            categories: []\r\n        },\r\n        series: []\r\n    });\r\n    const [isShowChart, setIsShowChart] = useState(false);\r\n\r\n    // effect handler\r\n    const fetchCountries = async () => {\r\n        try {\r\n            const res = await axios.get(\"https://api.covid19api.com/countries\");\r\n            setCountries(res.data);\r\n        } catch (err) {\r\n            console.log(err.response);\r\n        }\r\n    };\r\n    // console.log(dateRange);\r\n\r\n    const fetchReport = async () => {\r\n        try {\r\n            const dateFrom = dateRange.from ? new Date(new Date(dateRange.from).setDate(new Date(dateRange.from).getDate() - 1)).toISOString() : new Date().toISOString();\r\n            const dateTo = dateRange.to ? new Date(dateRange.to).toISOString() : new Date().toISOString();\r\n            const res = await axios.get(`\r\n                https://api.covid19api.com/country/${selectedCountry.Slug}?from=${dateFrom}&to=${dateTo}\r\n            `);\r\n            setReport(res.data);\r\n            if (!res.data.length) {\r\n                setTotal(null);\r\n            }\r\n            const chartTitle = selectedCountry.Country;\r\n            const _dateRange = res.data.map(data => new Date(data.Date).toDateString());\r\n            const deaths = res.data.map(data => data.Deaths);\r\n            const recovereds = res.data.map(data => data.Recovered);\r\n            const confirmeds = res.data.map(data => data.Confirmed);\r\n            // const \r\n            setOptions({\r\n                title: {\r\n                  text: chartTitle\r\n                },\r\n                xAxis: {\r\n                    categories: _dateRange\r\n                },\r\n                yAxis: {\r\n                    title: {\r\n                        text: 'Số ca'\r\n                    }\r\n                },\r\n                series: [\r\n                    {\r\n                        name: \"Số ca nhiễm\",\r\n                        data: confirmeds,\r\n                        color: \"#f00\"\r\n                    },\r\n                    {\r\n                        name: \"Số ca tử vong\",\r\n                        data: deaths,\r\n                        color: \"#000\"\r\n                    },\r\n                    {\r\n                        name: \"Số ca phục hổi\",\r\n                        data: recovereds,\r\n                        color: \"#0f0\"\r\n                    },\r\n                ]\r\n            });\r\n            setIsShowChart(true);\r\n        } catch (err) {\r\n            console.log(err.response);\r\n        }\r\n    };\r\n\r\n\r\n    const fetchReportNow = async () => {\r\n        try {\r\n            const dateFrom = new Date(new Date().setDate(new Date().getDate() - 2)).toISOString();\r\n            const dateTo = new Date(new Date().setDate(new Date().getDate() - 1)).toISOString();\r\n            const res = await axios.get(`\r\n                https://api.covid19api.com/country/${selectedCountry.Slug}?from=${dateFrom}&to=${dateTo}\r\n            `);\r\n            setTotal({\r\n                deaths: res.data[0].Deaths,\r\n                confirmeds: res.data[0].Confirmed,\r\n                recovereds: res.data[0].Recovered\r\n            });\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    };\r\n    // effect handler\r\n\r\n    // effect\r\n    useEffect(() => {\r\n        fetchCountries();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (selectedCountry) {\r\n            fetchReport();\r\n            fetchReportNow();\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [dateRange, selectedCountry]);\r\n    // effect\r\n\r\n    // handle function\r\n    const handleChange = (e, value) => {\r\n        setSelectedCountry(value);\r\n    };\r\n\r\n    const handleChangeDateFrom = (date) => {\r\n        \r\n        setDateRange({\r\n            ...dateRange,\r\n            from: date\r\n        });\r\n    };\r\n\r\n    const handleChangeDateTo = (date) => {\r\n        \r\n        setDateRange({\r\n            ...dateRange,\r\n            to: date\r\n        });\r\n    };\r\n    // handle function\r\n\r\n    return (\r\n        <Container className=\"App\">\r\n            <div className=\"choseOptions\">\r\n                <div className=\"flexItem country\">\r\n                    <SelectField \r\n                        options={countries}\r\n                        selectedValue={selectedCountry}\r\n                        label=\"Chọn quốc gia\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"flexItem date\">\r\n                    <DateField \r\n                        label=\"From\"\r\n                        value={dateRange.from}\r\n                        onChange={handleChangeDateFrom}\r\n                        maxDate={dateRange.to ? new Date(dateRange.to) : null}\r\n                    />\r\n                    <Button variant=\"contained\" color=\"primary\" className=\"reset\" onClick={() => setDateRange({\r\n                        ...dateRange,\r\n                        from: null\r\n                    })}>Reset date from</Button>\r\n                </div>\r\n                <div className=\"flexItem date\">\r\n                    <DateField \r\n                        label=\"To\"\r\n                        value={dateRange.to}\r\n                        onChange={handleChangeDateTo}\r\n                    />\r\n                    <Button variant=\"contained\" color=\"primary\" className=\"reset\" onClick={() => setDateRange({\r\n                        ...dateRange,\r\n                        to: null\r\n                    })}>Reset date to</Button>\r\n                </div>\r\n            </div>\r\n            {total ? (\r\n                <div className=\"total\">\r\n                    <p>Số ca nhiễm: {total.confirmeds}</p>\r\n                    <p>Số ca tử vong: {total.deaths}</p>\r\n                </div>\r\n            ) : (\r\n                <div className=\"total\">\r\n                    <p>Số ca nhiễm:</p>\r\n                    <p>Số ca tử vong:</p>\r\n                </div>\r\n            )}\r\n            {isShowChart ? report.length ? (\r\n                <div className=\"chart\">\r\n                    <HighchartsReact\r\n                        highcharts={Highcharts}\r\n                        options={options}\r\n                    />\r\n                    <span className=\"api\">\r\n                        Api document: <a href=\"https://documenter.getpostman.com/view/10808728/SzS8rjbc\" target=\"_blank\">https://documenter.getpostman.com/view/10808728/SzS8rjbc</a>\r\n                    </span>\r\n                </div>\r\n            ) : (\r\n                <p className=\"noReport\">Không có thống kê của {selectedCountry.Country}</p>\r\n            ) : (\r\n                <div className=\"chart\">\r\n                    <HighchartsReact\r\n                        highcharts={Highcharts}\r\n                        options={{\r\n                            title: {\r\n                              text: 'Biểu đồ'\r\n                            },\r\n                            xAxis: {\r\n                                categories: []\r\n                            },\r\n                            yAxis: {\r\n                                title: {\r\n                                    text: 'Số ca'\r\n                                }\r\n                            },\r\n                            series: [\r\n                                {\r\n                                    name: \"Số ca nhiễm\",\r\n                                    data: [],\r\n                                    color: \"#f00\"\r\n                                },\r\n                                {\r\n                                    name: \"Số ca tử vong\",\r\n                                    data: [],\r\n                                    color: \"#000\"\r\n                                },\r\n                                {\r\n                                    name: \"Số ca phục hổi\",\r\n                                    data: [],\r\n                                    color: \"#0f0\"\r\n                                },\r\n                            ]\r\n                          }}\r\n                    />\r\n                    <span className=\"api\">\r\n                        Api document: <a href=\"https://documenter.getpostman.com/view/10808728/SzS8rjbc\" target=\"_blank\">https://documenter.getpostman.com/view/10808728/SzS8rjbc</a>\r\n                    </span>\r\n                </div>\r\n            )}\r\n        </Container>\r\n    );\r\n};\r\n\r\nconst Container = styled.div`\r\n    .choseOptions {\r\n        display: flex;\r\n\r\n        @media (max-width: 540px) {\r\n            flex-direction: column;\r\n        }\r\n    }\r\n\r\n    .flexItem {\r\n        flex: 1;\r\n        padding: 0 20px;\r\n    }\r\n\r\n    .date {\r\n        /* padding-top: 15px; */\r\n    }\r\n\r\n    .chart {\r\n        padding: 30px 40px;\r\n\r\n        @media (max-width: 540px) {\r\n            padding: 30px;\r\n        }\r\n\r\n        @media (max-width: 376px) {\r\n            padding: 20px;\r\n        }\r\n    }\r\n\r\n    .total {\r\n        padding-left: 20px;\r\n    }\r\n\r\n    .noReport {\r\n        padding-left: 10px;\r\n    }\r\n\r\n    .api {\r\n        display: inline-block;\r\n        max-width: 100%;\r\n        overflow-x: hidden;\r\n        text-overflow: ellipsis;\r\n    }\r\n`;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}